{"version":3,"sources":["components/Form.jsx","shapes.js","components/TableItem.jsx","components/Table.jsx","components/Buttons.jsx","App.jsx","index.jsx"],"names":["Form","PropTypes","shape","rows","string","columns","showTable","bool","cell","generateTable","func","incrementCell","amount","number","id","showButtons","props","handleSubmitAddData","onChangeInput","highlight","showForm","error","className","onSubmit","event","type","name","placeholder","maxLength","onChange","target","value","TableItem","useState","showPercent","setShowPercent","percent","percentStyle","backgroundImage","onClick","onMouseEnter","onMouseLeave","style","Table","table","tableCopy","columnSum","rowLine","Array","Number","keys","map","row","oneRow","splice","rowSum","item","reduce","cur","prev","forEach","i","val","key","toFixed","Object","values","Math","floor","Buttons","App","setRows","setColumns","setHighlight","setTable","setShowForm","setShowTable","setShowButtons","setError","randomGenerate","random","uuidv4","isLight","preventDefault","trim","matrix","errorObj","newState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6adf5d6.chunk.js","sourcesContent":["import React from 'react'\nimport { FormShape } from '../shapes'\n\nexport const Form = (props) => {\n  const {\n    handleSubmitAddData,\n    onChangeInput,\n    rows,\n    columns,\n    highlight,\n    showForm,\n    error\n  } = props\n\n  return (\n    showForm && (\n      <form className=\"form\" onSubmit={(event) => handleSubmitAddData(event)}>\n        {\n          error.rows && (\n            <div className=\"form__error\">\n              Please add rows value\n            </div>\n          )\n        }\n        <input\n          type=\"text\"\n          name=\"rows\"\n          className={`form-control ${error && 'form--error'}`}\n          placeholder=\"Rows...\"\n          maxLength=\"3\"\n          onChange={(event) => onChangeInput(event.target)}\n          value={rows}\n        />\n        {\n          error.columns && (\n            <div className=\"form__error\">\n              Please add columns value\n            </div>\n          )\n        }\n        <input\n          type=\"text\"\n          name=\"columns\"\n          className={`form-control ${error && 'form--error'}`}\n          placeholder=\"Columns...\"\n          maxLength=\"3\"\n          onChange={(event) => onChangeInput(event.target)}\n          value={columns}\n        />\n        {\n          error.highlight && (\n            <div className=\"form__error\">\n              Please add highlight value\n            </div>\n          )\n        }\n        <input\n          type=\"text\"\n          name=\"highlight\"\n          className={`form-control ${error && 'form--error'}`}\n          placeholder=\"Highlight cells...\"\n          maxLength=\"3\"\n          onChange={(event) => onChangeInput(event.target)}\n          value={highlight}\n        />\n        <button\n          type=\"submit\"\n          className=\"btn btn-dark\"\n        >\n          Generate table\n        </button>\n      </form>\n    )\n  )\n}\n\nForm.propTypes = FormShape.isRequired\n","import PropTypes from 'prop-types'\n\nexport const TableShape = PropTypes.shape({\n  rows: PropTypes.string,\n  columns: PropTypes.string,\n  showTable: PropTypes.bool,\n  cell: PropTypes.string\n})\n\nexport const FormShape = PropTypes.shape({\n  generateTable: PropTypes.func\n})\n\nexport const TableItemShape = PropTypes.shape({\n  incrementCell: PropTypes.func,\n  amount: PropTypes.number,\n  id: PropTypes.number\n})\n\nexport const ButtonsShape = PropTypes.shape({\n  showButtons: PropTypes.bool\n})\n","import React, { useState } from 'react'\nimport { TableItemShape } from '../shapes'\n\nexport const TableItem = (props) => {\n  const [showPercent, setShowPercent] = useState(false)\n\n  const { incrementCell, amount, id, percent } = props\n\n  const percentStyle = {\n    backgroundImage: `linear-gradient(to left, orange 0% ${percent}%, #343a40 ${percent}% 100%)`\n  }\n\n  const onMouseEnterHandler = () => {\n    setShowPercent(true)\n  }\n\n  const onMouseLeaveHandler = () => {\n    setShowPercent(false)\n  }\n\n  return (\n    <td\n      id={id}\n      onClick={(event) => incrementCell(event.target.id)}\n      onMouseEnter={onMouseEnterHandler}\n      onMouseLeave={onMouseLeaveHandler}\n      style={showPercent ? percentStyle : {}}\n    >\n      {\n        showPercent\n          ? `${percent}%`\n          : amount\n      }\n    </td>\n  )\n}\n\nTableItem.propTypes = TableItemShape.isRequired\n","import React from 'react'\nimport { TableShape } from '../shapes'\nimport { TableItem } from './TableItem'\n\nexport const Table = (props) => {\n  const { rows, columns, table, showTable, incrementCell } = props\n\n  const tableCopy = [...table]\n  const columnSum = {}\n  const rowLine = [...Array(Number(rows)).keys()]\n\n  return (\n    <>\n      {showTable && (\n        <table className=\"table table-dark\">\n          <tbody>\n            {rowLine.map(row => {\n              const oneRow = tableCopy.splice(0, Number(columns))\n              const rowSum = oneRow.map(item => item.amount).reduce((cur, prev) => cur + prev, 0)\n\n              oneRow.forEach((item, i) => {\n                if (columnSum[i]) {\n                  let val = columnSum[i]\n                  val += item.amount\n                  columnSum[i] = val\n                } else {\n                  columnSum[i] = item.amount\n                }\n              })\n              return (\n                <tr key={row}>\n                  {oneRow.map(item => (\n                    <TableItem\n                      key={item.id}\n                      id={item.id}\n                      amount={item.amount}\n                      percent={(item.amount / rowSum * 100).toFixed(3)}\n                      incrementCell={incrementCell}\n                    />\n                  ))}\n                  <td>Sum: {rowSum}</td>\n                </tr>\n              )\n            })}\n            <tr>{Object.values(columnSum).map(item => (\n              <td key={item}>Average sum: {Math.floor(item / columns)}</td>\n            ))}</tr>\n          </tbody>\n        </table>\n      )}\n    </>\n  )\n}\n\nTable.propTypes = TableShape.isRequired\n","import React from 'react'\nimport { ButtonsShape } from '../shapes'\n\nexport const Buttons = (props) => {\n  const { showButtons } = props\n\n  return (\n    <>\n      {showButtons && (\n        <div className=\"btn-group\">\n          <button\n            type=\"button\"\n            className=\"btn btn-dark\"\n          >\n            Add row +\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-dark\"\n          >\n            Delete row -\n          </button>\n        </div>\n      )}\n    </>\n  )\n}\n\nButtons.propTypes = ButtonsShape.isRequired\n","import React, { useState } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Form } from './components/Form'\nimport { Table } from './components/Table'\nimport { Buttons } from './components/Buttons'\nimport './App.css'\n\nconst App = () => {\n  const [rows, setRows] = useState('')\n  const [columns, setColumns] = useState('')\n  const [highlight, setHighlight] = useState('')\n  const [table, setTable] = useState([])\n\n  const [showForm, setShowForm] = useState(true)\n  const [showTable, setShowTable] = useState(false)\n  const [showButtons, setShowButtons] = useState(false)\n  const [error, setError] = useState({ rows: '', columns: '', highlight: '' })\n\n  const onChangeInput = (target) => {\n    const { name, value } = target\n\n    switch (name) {\n      case 'columns':\n        setColumns(value)\n        setError({ columns: false })\n        break\n      case 'rows':\n        setRows(value)\n        setError({ rows: false })\n        break\n      case 'highlight':\n        setHighlight(value)\n        setError({ highlight: false })\n        break\n      default:\n        setRows('')\n        setColumns('')\n        break\n    }\n  }\n\n  const randomGenerate = item => ({\n    amount: Math.floor(Math.random() * 999),\n    id: uuidv4(),\n    isLight: false\n  })\n\n  const handleSubmitAddData = (event) => {\n    event.preventDefault()\n\n    if (rows.trim() && columns.trim() && highlight.trim()) {\n      const matrix = [...Array(columns * rows).keys()].map(randomGenerate)\n\n      setShowForm(false)\n      setShowTable(true)\n      setShowButtons(true)\n      setTable(matrix)\n    }\n\n    const errorObj = {\n      rows: '',\n      columns: '',\n      highlight: ''\n    }\n\n    if (!rows) {\n      errorObj.rows = true\n    }\n\n    if (!columns) {\n      errorObj.columns = true\n    }\n\n    if (!highlight) {\n      errorObj.highlight = true\n    }\n\n    setError({\n      rows: errorObj.rows,\n      columns: errorObj.columns\n    })\n  }\n\n  const incrementCell = (id) => {\n    const newState = table.map(item => (\n      item.id === id\n        ? { ...item, amount: item.amount + 1 }\n        : item\n    ))\n\n    setTable(newState)\n  }\n\n  return (\n    <div className=\"main\">\n      <Form\n        handleSubmitAddData={handleSubmitAddData}\n        onChangeInput={onChangeInput}\n        rows={rows}\n        columns={columns}\n        highlight={highlight}\n        showForm={showForm}\n        error={error}\n      />\n      <Table\n        rows={rows}\n        columns={columns}\n        showTable={showTable}\n        incrementCell={incrementCell}\n        table={table}\n      />\n      <Buttons showButtons={showButtons} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}