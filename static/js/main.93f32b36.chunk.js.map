{"version":3,"sources":["store/types.tsx","store/reducers.tsx","store/store.tsx","helpers/generate.tsx","components/Form/Form.tsx","store/actions.tsx","components/TableCell/TableCell.tsx","components/TableCellSum/TableCellSum.tsx","components/TableRow/TableRow.tsx","helpers/selectors.tsx","components/AverageRow/AverageRow.tsx","helpers/getLightClosest.tsx","components/Table/Table.tsx","components/ButtonDelete/ButtonDelete.tsx","components/ButtonAdd/ButtonAdd.tsx","components/Buttons/Buttons.tsx","App.tsx","index.tsx"],"names":["ACTION_TYPES","rootReducer","combineReducers","params","state","action","SET_PARAMS","type","payload","table","SET_TABLE","ADD_ROW","REMOVE_ROW","filter","id","lastRowKey","rows","SET_ROWS","cells","SET_CELLS","INCREMENT","columnsAmount","notDeleted","Object","keys","slice","res","values","cellsItem","index","resObj","map","item","amount","buttons","SHOW_BUTTONS","store","createStore","generateTable","rowsAmount","Array","fill","uuidv4","preparedArray","reduce","acum","rowID","cellID","Math","floor","random","Form","dispatch","useDispatch","useState","lightsAmount","inputValue","setInputValue","error","setError","handleGenerateTable","event","preventDefault","Number","batch","setTable","setRows","setCells","setShowButtons","onChangeHandler","currentTarget","name","value","className","onSubmit","placeholder","onChange","React","memo","props","styleString","onMouseEnterHandler","onMouseLeaveHandler","onClickIncrement","styleObj","background","onClick","onMouseEnter","onMouseLeave","style","prevProps","nextProps","rowSum","onMouseEnterPercent","onMouseLeavePercent","row","lightList","showPercent","setShowPercent","cellId","percent","toFixed","key","some","getRows","getCells","getTable","getColumnsAmount","getLightsAmount","getShowButtons","getRowSum","createSelector","prev","cur","getAverageRowSum","onlyAmount","length","averageArray","useSelector","getLightClosest","difference","abs","sort","a","b","setLightList","sumRowArray","obj","rowId","ButtonDelete","deleteRow","ButtonAdd","addRow","Buttons","showButtons","App","ReactDOM","hydrate","document","getElementById"],"mappings":"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","file":"static/js/main.93f32b36.chunk.js","sourcesContent":["import {\n  setParams,\n  setTable,\n  setRows,\n  setCells,\n  setShowButtons,\n  increment,\n  setNewRow,\n  removeRow\n} from './actions'\n\nexport const ACTION_TYPES = {\n  SET_PARAMS: 'SET::PARAMS',\n  SET_TABLE: 'SET::TABLE',\n  SET_ROWS: 'SET::ROWS',\n  SET_CELLS: 'SET::CELLS',\n  SHOW_BUTTONS: 'SHOW::BUTTONS',\n  INCREMENT: 'INCREMENT',\n  ADD_ROW: 'ADD::ROW',\n  REMOVE_ROW: 'REMOVE::ROW'\n}\n\nexport type State = {\n  table: Array<string>\n  rows: RowsParams\n  cells: CellsParams\n  params: Params\n  buttons: boolean\n}\n\nexport type Action = (\n  | ReturnType<typeof setParams>\n  | ReturnType<typeof setTable>\n  | ReturnType<typeof setRows>\n  | ReturnType<typeof setCells>\n  | ReturnType<typeof setShowButtons>\n  | ReturnType<typeof increment>\n  | ReturnType<typeof setNewRow>\n  | ReturnType<typeof removeRow>\n)\n\nexport type Params = {\n  [name: string]: string | number\n}\n\nexport type RowsParams = {\n  [name: string]: Array<string>\n}\n\nexport type CellsParams = {\n  [name: string]: { id: string, amount: number }\n}\n\nexport type NewRowsParams = {\n  table: Array<string>\n  rows: RowsParams\n  cells: CellsParams\n}\n","import { combineReducers } from 'redux'\nimport { ACTION_TYPES, Action, Params, RowsParams, CellsParams } from './types'\n\nexport const paramsReducer = (state: Params = {}, action: Action): Params => {\n  const { SET_PARAMS } = ACTION_TYPES\n\n  switch (action.type) {\n    case SET_PARAMS:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport const tableReducer = (state: Array<string> = [], action: Action): Array<string> => {\n  const { SET_TABLE, ADD_ROW, REMOVE_ROW } = ACTION_TYPES\n\n  switch (action.type) {\n    case SET_TABLE:\n      return action.payload\n    case ADD_ROW:\n      return [...state, action.payload.table]\n    case REMOVE_ROW:\n      return state.filter(id => id !== action.payload.lastRowKey)\n    default:\n      return state\n  }\n}\n\nconst rowsReducer = (state: RowsParams = {}, action: Action): RowsParams => {\n  const { SET_ROWS, ADD_ROW, REMOVE_ROW } = ACTION_TYPES\n\n  switch (action.type) {\n    case SET_ROWS:\n      return action.payload\n    case ADD_ROW:\n      return { ...state, ...action.payload.rows }\n    case REMOVE_ROW:\n      delete state[action.payload.lastRowKey]\n      return state\n    default:\n      return state\n  }\n}\n\nconst cellsReducer = (state: CellsParams = {}, action: Action): CellsParams => {\n  const { SET_CELLS, INCREMENT, ADD_ROW, REMOVE_ROW } = ACTION_TYPES\n\n  switch (action.type) {\n    case SET_CELLS:\n      return action.payload\n    case ADD_ROW:\n      return { ...state, ...action.payload.cells }\n    case REMOVE_ROW:\n      const { columnsAmount } = action.payload\n      const notDeleted = Object.keys(state).slice(0, -columnsAmount)\n\n      const res = Object.values(state).filter((cellsItem, index) => (\n        cellsItem.id === notDeleted[index]\n      ))\n      const resObj: CellsParams = {}\n      res.map((item: { id: string, amount: number }) => resObj[item.id] = { ...item })\n      return resObj\n    case INCREMENT:\n      return {\n        ...state,\n        [action.payload]: {\n          ...state[action.payload],\n          amount: state[action.payload].amount + 1\n        }\n      }\n    default:\n      return state\n  }\n}\n\nconst buttonsReducer = (state = false, action: Action): boolean => {\n  const { SHOW_BUTTONS } = ACTION_TYPES\n\n  switch (action.type) {\n    case SHOW_BUTTONS:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport const rootReducer = combineReducers({\n  params: paramsReducer,\n  table: tableReducer,\n  rows: rowsReducer,\n  cells: cellsReducer,\n  buttons: buttonsReducer\n})\n","import { createStore } from 'redux'\nimport { rootReducer } from './reducers'\n\nconst store = createStore(rootReducer)\n\nexport default store\n","import { v4 as uuidv4 } from 'uuid'\nimport { RowsParams, CellsParams } from '../store/types'\n\nexport const generateTable = (rowsAmount: string | number, columnsAmount: string | number) => {\n  const table: Array<string> = new Array(+rowsAmount).fill(0).map((item: string) => item = uuidv4())\n\n  const preparedArray: Array<string> = new Array(+rowsAmount * +columnsAmount).fill(0).map((item: string) => item = uuidv4())\n\n  const rows = table.reduce(\n    (acum: RowsParams, rowID, index) => (\n      (acum[rowID] = preparedArray.slice(\n        +columnsAmount * index,\n        +columnsAmount * index + +columnsAmount\n      )),\n      acum\n    ),\n    {}\n  )\n\n  const cells = preparedArray.reduce(\n    (acum: CellsParams, cellID: string) => (\n      (acum[cellID] = {\n        id: cellID,\n        amount: Math.floor(Math.random() * 999)\n      }),\n      acum\n    ),\n    {}\n  )\n\n  return { table, rows, cells }\n}\n","import React, { useState } from 'react'\nimport { generateTable } from '../../helpers/generate'\nimport { useDispatch, batch } from 'react-redux'\n\nimport './Form.css'\nimport {\n  setParams,\n  setTable,\n  setRows,\n  setCells,\n  setShowButtons\n} from '../../store/actions'\n\ntype InputValue = {\n  rowsAmount: string,\n  columnsAmount: string,\n  lightsAmount: string\n}\n\ntype ErrorValue = {\n  rowsAmount: boolean,\n  columnsAmount: boolean,\n  lightsAmount: boolean\n}\n\nconst Form: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const [inputValue, setInputValue] = useState<InputValue>({\n    rowsAmount: '',\n    columnsAmount: '',\n    lightsAmount: ''\n  })\n\n  const [error, setError] = useState<ErrorValue>({\n    rowsAmount: false,\n    columnsAmount: false,\n    lightsAmount: false\n  })\n\n  const handleGenerateTable = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n\n    const rowsAmount = inputValue.rowsAmount\n    const columnsAmount = inputValue.columnsAmount\n    const lightsAmount = inputValue.lightsAmount\n\n    if (Number(rowsAmount) > 0 && Number(columnsAmount) > 0 && Number(lightsAmount) > 0) {\n      const { table, rows, cells } = generateTable(rowsAmount, columnsAmount)\n\n      batch(() => {\n        dispatch(setParams({ rowsAmount, columnsAmount, lightsAmount }))\n        dispatch(setTable(table))\n        dispatch(setRows(rows))\n        dispatch(setCells(cells))\n        dispatch(setShowButtons(true))\n      })\n\n      setInputValue({\n        rowsAmount: '',\n        columnsAmount: '',\n        lightsAmount: ''\n      })\n    }\n\n    setError({\n      rowsAmount: !!((!rowsAmount || Number(rowsAmount) <= 0)),\n      columnsAmount: !!((!columnsAmount || Number(columnsAmount) <= 0)),\n      lightsAmount: !!((!lightsAmount || Number(lightsAmount) <= 0))\n    })\n  }\n\n  const onChangeHandler = (event: React.FormEvent<HTMLInputElement>): void => {\n    const { name, value } = event.currentTarget\n\n    setError({ ...error, [name]: false })\n    setInputValue({ ...inputValue, [name]: value })\n  }\n\n  return (\n    <form\n      id=\"form\"\n      className=\"form\"\n      onSubmit={(event) => handleGenerateTable(event)}>\n      {\n        error.rowsAmount && (\n          <div>\n              Please add correct rows value\n          </div>\n        )\n      }\n      <input\n        type=\"number\"\n        name=\"rowsAmount\"\n        className={`form-control ${error.rowsAmount && 'error'}`}\n        placeholder=\"Rows...\"\n        onChange={(event) => onChangeHandler(event)}\n        value={inputValue.rowsAmount}\n      />\n      {\n        error.columnsAmount && (\n          <div>\n              Please add correct columns value\n          </div>\n        )\n      }\n      <input\n        type=\"number\"\n        name=\"columnsAmount\"\n        className={`form-control ${error.columnsAmount && 'error'}`}\n        placeholder=\"Columns...\"\n        onChange={(event) => onChangeHandler(event)}\n        value={inputValue.columnsAmount}\n      />\n      {\n        error.lightsAmount && (\n          <div>\n              Please add correct highlight value\n          </div>\n        )\n      }\n      <input\n        type=\"number\"\n        name=\"lightsAmount\"\n        className={`form-control ${error.lightsAmount && 'error'}`}\n        placeholder=\"Highlight cells...\"\n        onChange={(event) => onChangeHandler(event)}\n        value={inputValue.lightsAmount}\n      />\n      <button\n        id =\"button-generate\"\n        type=\"submit\"\n        className=\"btn btn-dark\"\n      >\n        Generate\n      </button>\n    </form>\n  )\n}\n\nexport default Form\n","import {\n  ACTION_TYPES,\n  Params,\n  RowsParams,\n  CellsParams,\n  NewRowsParams\n} from './types'\n\nexport const setParams = (params: Params) => ({\n  payload: params,\n  type: ACTION_TYPES.SET_PARAMS\n})\n\nexport const setTable = (params: Array<string>) => ({\n  payload: params,\n  type: ACTION_TYPES.SET_TABLE\n})\n\nexport const setRows = (params: RowsParams) => ({\n  payload: params,\n  type: ACTION_TYPES.SET_ROWS\n})\n\nexport const setCells = (params: CellsParams) => ({\n  payload: params,\n  type: ACTION_TYPES.SET_CELLS\n})\n\nexport const setShowButtons = (params: boolean) => ({\n  payload: params,\n  type: ACTION_TYPES.SHOW_BUTTONS\n})\n\nexport const increment = (params: string) => ({\n  payload: params,\n  type: ACTION_TYPES.INCREMENT\n})\n\nexport const setNewRow = (params: NewRowsParams) => ({\n  payload: params,\n  type: ACTION_TYPES.ADD_ROW\n})\n\nexport const removeRow = (params: any) => ({\n  payload: params,\n  type: ACTION_TYPES.REMOVE_ROW\n})\n","import React from 'react'\nimport { TableCellProps } from '../../helpers/interface'\nimport './TableCell.css'\n\nconst areEqual = (prevProps: TableCellProps, nextProps: TableCellProps) => {\n  const { id, amount, styleString } = prevProps\n\n  if (nextProps.styleString !== styleString) {\n    return false\n  }\n  if (nextProps.amount !== amount) {\n    return false\n  }\n  if (nextProps.id !== id) {\n    return false\n  }\n  return true\n}\n\nconst TableCell: React.FC<TableCellProps> = (props) => {\n  const {\n    id,\n    amount,\n    styleString,\n    onMouseEnterHandler,\n    onMouseLeaveHandler,\n    onClickIncrement\n  } = props\n\n  const styleObj = {\n    background: `${styleString}`\n  }\n\n  return (\n    <td\n      id={id}\n      onClick={onClickIncrement}\n      onMouseEnter={onMouseEnterHandler}\n      onMouseLeave={onMouseLeaveHandler}\n      style={styleObj}\n    >\n      {amount}\n    </td>\n  )\n}\n\nexport default React.memo(TableCell, areEqual)\n","import React from 'react'\nimport { TableCellSumProps } from '../../helpers/interface'\n\nconst areEqual = (prevProps: TableCellSumProps, nextProps: TableCellSumProps) => {\n  const { rowSum } = prevProps\n\n  if (nextProps.rowSum !== rowSum) {\n    return false\n  }\n  return true\n}\n\nconst TableCellSum: React.FC<TableCellSumProps> = (props) => {\n  const {\n    rowSum,\n    onMouseEnterPercent,\n    onMouseLeavePercent\n  } = props\n\n  return (\n    <td\n      onMouseEnter={onMouseEnterPercent}\n      onMouseLeave={onMouseLeavePercent}\n    >\n      Sum: {rowSum}\n    </td>\n\n  )\n}\n\nexport default React.memo(TableCellSum, areEqual)\n","import React, { useState } from 'react'\nimport { TableRowProps } from '../../helpers/interface'\nimport TableCell from '../TableCell/TableCell'\nimport TableCellSum from '../TableCellSum/TableCellSum'\n\nconst areEqual = (prevProps: TableRowProps, nextProps: TableRowProps): boolean => {\n  const { row, cells, lightList } = prevProps\n\n  const equal = !row.some((id) => (\n    nextProps.cells[id].amount !== cells[id].amount ||\n    nextProps.lightList[id] !== lightList[id]\n  ))\n\n  return equal\n}\n\nconst TableRow: React.FC<TableRowProps> = (props) => {\n  const {\n    id,\n    row,\n    cells,\n    rowSum,\n    lightList,\n    onMouseEnterHandler,\n    onMouseLeaveHandler,\n    onClickIncrement\n  } = props\n\n  const [showPercent, setShowPercent] = useState(false)\n\n  const onMouseEnterPercent = () => {\n    setShowPercent(true)\n  }\n\n  const onMouseLeavePercent = () => {\n    setShowPercent(false)\n  }\n\n  return (\n    <tr\n      id={id}\n    >\n      {row.map(cellId => {\n        const value = cells[cellId].amount\n        const percent = (cells[cellId].amount / rowSum * 100).toFixed(2)\n        let styleString = ''\n\n        if (lightList[cellId]) { styleString += '#6c757d' }\n\n        if (showPercent) {\n          styleString += `linear-gradient(90deg, rgba(220,53,69,1) ${percent}%, rgba(108,117,125,1) ${percent}%)`\n        }\n\n        return (\n          <TableCell\n            key={cellId}\n            id={cellId}\n            amount={showPercent ? percent : value}\n            styleString={styleString}\n            onMouseEnterHandler={onMouseEnterHandler}\n            onMouseLeaveHandler={onMouseLeaveHandler}\n            onClickIncrement={onClickIncrement}\n          />\n        )\n      })}\n      <TableCellSum\n        rowSum={rowSum}\n        onMouseEnterPercent={onMouseEnterPercent}\n        onMouseLeavePercent={onMouseLeavePercent}\n      />\n    </tr>\n  )\n}\n\nexport default React.memo(TableRow, areEqual)\n","import { createSelector } from 'reselect'\nimport { State } from '../store/types'\n\nexport const getRows = (state: State) => state.rows\n\nexport const getCells = (state: State) => state.cells\n\nexport const getTable = (state: State) => state.table\n\nexport const getRowsAmount = (state: State) => state.params.rowsAmount\n\nexport const getColumnsAmount = (state: State) => state.params.columnsAmount\n\nexport const getLightsAmount = (state: State) => state.params.lightsAmount\n\nexport const getShowButtons = (state: State) => state.buttons\n\nexport const getRowSum = createSelector(\n  [getRows, getCells],\n  (rows, cells) => {\n    const sumArr = Object.values(rows).map(row => (\n      row.map(item => cells[item].amount).reduce((prev, cur) => prev + cur, 0)\n    ))\n\n    return sumArr\n  }\n)\n\nexport const getAverageRowSum = createSelector(\n  [getRows, getCells, getColumnsAmount],\n  (rows, cells, columnsAmount) => {\n    const onlyAmount = Object.values(rows).map(row => (\n      row.map(item => cells[item].amount)\n    ))\n\n    const averageRow = onlyAmount.reduce((acum, cur) =>\n      cur.map((amount, index) => (acum[index] += amount)), new Array(+columnsAmount).fill(0)\n    )\n    return averageRow.map((item: number) => Math.floor(item / onlyAmount.length))\n  }\n)\n","import React from 'react'\nimport { getAverageRowSum } from '../../helpers/selectors'\nimport { useSelector } from 'react-redux'\n\nconst AverageRow: React.FC = () => {\n  const averageArray = useSelector(getAverageRowSum)\n\n  return (\n    <>\n      {<tr>{averageArray.map((item, index) => (\n        <td key={index}>Average sum: {item}</td>\n      ))}\n      </tr>}\n    </>\n  )\n}\n\nexport default React.memo(AverageRow)\n","import { CellsParams } from '../store/types'\n\nexport const getLightClosest = (id: string, cells: CellsParams, lightsAmount: string | number) => {\n  const arr = Object.values(cells).map(item => ({\n    ...item,\n    difference: Math.abs(item.amount - cells[id].amount)\n  })).sort((a, b) => a.difference - b.difference)\n    .slice(0, +lightsAmount)\n    .map(item => item.id)\n\n  const resObj: { [name: string]: boolean } = arr.reduce((prev, cur) => ({ ...prev, [cur]: true }), {})\n\n  return resObj\n}\n","import React, { useState, SyntheticEvent } from 'react'\nimport TableRow from '../TableRow/TableRow'\nimport AverageRow from '../AverageRow/AverageRow'\nimport { getLightClosest } from '../../helpers/getLightClosest'\nimport { getRowSum, getLightsAmount, getTable, getRows, getCells } from '../../helpers/selectors'\nimport { increment } from '../../store/actions'\nimport './Table.css'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst Table: React.FC = () => {\n  const [lightList, setLightList] = useState({})\n  const dispatch = useDispatch()\n\n  const table = useSelector(getTable)\n  const lightsAmount = useSelector(getLightsAmount)\n  const rows = useSelector(getRows)\n  const cells = useSelector(getCells)\n  const sumRowArray = useSelector(getRowSum)\n\n  const onMouseEnterHandler = (event: SyntheticEvent<HTMLTableCellElement>) => {\n    const { id } = event.currentTarget\n    const obj = getLightClosest(id, cells, lightsAmount)\n    setLightList(obj)\n  }\n\n  const onMouseLeaveHandler = (): void => {\n    setLightList({})\n  }\n\n  const onClickIncrement = (event: SyntheticEvent<HTMLTableCellElement>) => {\n    const { id } = event.currentTarget\n    dispatch(increment(id))\n    const obj = getLightClosest(id, cells, lightsAmount)\n    setLightList(obj)\n  }\n\n  return (\n    <>\n      {table.length > 0 && (\n        <table className=\"table table-dark\">\n          <tbody>\n            {table.map((rowId: string, index: number) => (\n              <TableRow\n                key={rowId}\n                id={rowId}\n                rowSum={sumRowArray[index]}\n                row={rows[rowId]}\n                cells={cells}\n                lightList={lightList}\n                onMouseEnterHandler={onMouseEnterHandler}\n                onMouseLeaveHandler={onMouseLeaveHandler}\n                onClickIncrement={onClickIncrement}\n              />\n            ))}\n            <AverageRow />\n          </tbody>\n        </table>\n      )}\n    </>\n  )\n}\n\nexport default React.memo(Table)\n","import React from 'react'\n\ninterface Props {\n  deleteRow: () => void\n}\n\nexport const ButtonDelete: React.FC<Props> = (props) => {\n  const { deleteRow } = props\n\n  return (\n    <button\n      id=\"button-delete\"\n      type=\"button\"\n      className=\"btn btn-dark\"\n      onClick={deleteRow}\n    >\n      Delete row -\n    </button>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  addRow: () => void\n}\n\nexport const ButtonAdd: React.FC<Props> = ({ addRow }) => {\n  return (\n    <button\n      id =\"button-add\"\n      type=\"button\"\n      className=\"btn btn-dark\"\n      onClick={addRow}\n    >\n      Add row +\n    </button>\n  )\n}\n","import React from 'react'\nimport { generateTable } from '../../helpers/generate'\nimport { ButtonDelete } from '../ButtonDelete/ButtonDelete'\nimport { ButtonAdd } from '../ButtonAdd/ButtonAdd'\nimport { getColumnsAmount, getTable, getShowButtons } from '../../helpers/selectors'\nimport './Buttons.css'\nimport { setNewRow, removeRow } from '../../store/actions'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst Buttons: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const columnsAmount = useSelector(getColumnsAmount)\n  const showButtons = useSelector(getShowButtons)\n  const table = useSelector(getTable)\n\n  const addRow = (): void => {\n    const { table, rows, cells } = generateTable(1, columnsAmount)\n\n    dispatch(setNewRow({ table, rows, cells }))\n  }\n\n  const deleteRow = (): void => {\n    const lastRowKey = table[table.length - 1]\n\n    dispatch(removeRow({ lastRowKey, columnsAmount }))\n  }\n\n  return (\n    <>\n      {showButtons && (\n        <div className=\"buttons\">\n          <ButtonDelete deleteRow={deleteRow} />\n          <ButtonAdd addRow={addRow} />\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Buttons\n","import React from 'react'\nimport Form from './components/Form/Form'\nimport Table from './components/Table/Table'\nimport Buttons from './components/Buttons/Buttons'\nimport './App.css'\n\nconst App: React.FC = () => (\n  <div className=\"main\">\n    <Form />\n    <Buttons />\n    <Table />\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css'\n\nReactDOM.hydrate(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}